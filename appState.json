{"EDITOR_STATE":{"allProjectFiles":{"33934c41-a5f8-4f8f-9d03-8d207726a4e8":{"id":"33934c41-a5f8-4f8f-9d03-8d207726a4e8","parent":null,"name":"real-time-stream-processor-mock","type":"DIRECTORY","isDirectory":true,"children":["16e8ed21-8b13-496c-8a07-ff6b94c7e9e7","bad406e2-4d28-4698-b061-3ab30fb2fa0b"],"isRemovable":false,"filePath":"real-time-stream-processor-mock"},"16e8ed21-8b13-496c-8a07-ff6b94c7e9e7":{"id":"16e8ed21-8b13-496c-8a07-ff6b94c7e9e7","parent":"33934c41-a5f8-4f8f-9d03-8d207726a4e8","name":"process-and-persist-record.js","type":"LAMBDA_FILE","isDirectory":false,"children":[],"isRemovable":true,"filePath":"real-time-stream-processor-mock/process-and-persist-record.js","code":"/*\n * SLAppForge Sigma. Integrated Development Environment for Serverless Computing\n *\n * Copyright (c) 2018 SLAppForge Lanka Private Limited. All Rights Reserved.\n * https://www.slappforge.com\n *\n * You may use this file in accordance with the License Agreement provided with the Software or, alternatively, \n * in accordance with the terms contained in a written agreement between you and SLAppForge.\n *\n * If you have questions regarding the use of this file, please contact SLAppForge at info@slappforge.com\n */\n\nconsole.log('Loading function: Process and Persist Record...');\n\nconst AWS = require('aws-sdk');\nconst ddb = new AWS.DynamoDB.DocumentClient();\n\nexports.handler = function (event, context, callback) {\n\tconsole.log('Received event:', JSON.stringify(event, null, 2));\n\n\t/**\n\t * Iterates through the Kinesis records which this function is triggered by and parses the activity payload.\n\t * Validates the activity and inserts into a DynamoDB table.\n\t */\n\tevent.Records.forEach(record => {\n\t\t\n\t\tlet payload = JSON.parse(new Buffer(record.kinesis.data, 'base64').toString('ascii'));\n\t\tconsole.log('Decoded payload:', payload);\n\t\t\n\t\tlet activity = JSON.parse(payload);\n\n\t\tconsole.log('IP:', activity.ip);\n\t\tconsole.log('Timestamp:', activity.timestamp);\n\n\t\t// Partition key and sort key should be non null values\n\t\tif (activity.ip !== undefined && activity.timestamp !== undefined) {\n\n\t\t\tddb.put({\n\t\t\t\tTableName: 'click-stream-table',\n\t\t\t\tItem: { \n\t\t\t\t\t'IP': activity.ip, \n\t\t\t\t\t'Timestamp': activity.timestamp, \n\t\t\t\t\t'Browser': activity.browser, \n\t\t\t\t\t'URL': activity.url, \n\t\t\t\t\t'Referrer': activity.referrer, \n\t\t\t\t\t'OS': activity.os, \n\t\t\t\t\t'Country': activity.country, \n\t\t\t\t\t'Language': activity.language \n\t\t\t\t}\n\t\t\t}, function (err, data) {\n\t\t\t\tif (err) {\n\t\t\t\t\tconsole.log('Response -> error:', err);\n\t\t\t\t\tcontext.fail(err);\n\t\t\t\t} else {\n\t\t\t\t\tconsole.debug('Response -> data:', data);\n\t\t\t\t\tcontext.succeed();\n\t\t\t\t}\n\t\t\t});\n\n\t\t} else {\n\t\t\tconsole.log('Invalid input:', 'Missing required keys ip and/or timestamp');\n\t\t\tcontext.fail(new Error('Missing required keys ip and/or timestamp'));\n\t\t}\n\n\t});\n\n}","resources":["kinesisclickStream","ddbclickStreamTable","ddbclickStreamTable","ddbclickStreamTable","ddbclickStreamTable","ddbclickStreamTable","ddbclickStreamTable","ddbclickStreamTable"],"triggers":[{"resourceName":"kinesisclickStream","config":{"StartingPosition":"TRIM_HORIZON","BatchSize":100}}],"version":1},"bad406e2-4d28-4698-b061-3ab30fb2fa0b":{"id":"bad406e2-4d28-4698-b061-3ab30fb2fa0b","parent":"33934c41-a5f8-4f8f-9d03-8d207726a4e8","name":"publish-activity-stream.js","type":"LAMBDA_FILE","isDirectory":false,"children":[],"isRemovable":true,"filePath":"real-time-stream-processor-mock/publish-activity-stream.js","code":"/*\n * SLAppForge Sigma. Integrated Development Environment for Serverless Computing\n *\n * Copyright (c) 2018 SLAppForge Lanka Private Limited. All Rights Reserved.\n * https://www.slappforge.com\n *\n * You may use this file in accordance with the License Agreement provided with the Software or, alternatively, \n * in accordance with the terms contained in a written agreement between you and SLAppForge.\n *\n * If you have questions regarding the use of this file, please contact SLAppForge at info@slappforge.com\n */\n\nconsole.log('Loading function: Publish Activity Stream...');\n\nconst AWS = require('aws-sdk');\nconst kinesis = new AWS.Kinesis();\n\nexports.handler = function (event, context, callback) {\n\tconsole.log('Received event:', JSON.stringify(event, null, 2));\n\n    // activity reported through API proxy\n    let activity = JSON.stringify(event.body);\n    console.log('Activity:', activity);\n\n    kinesis.putRecord({\n        Data: activity,\n        PartitionKey: '0',\n        StreamName: 'click-stream'\n    }).promise()\n        .then(data => {\n            console.log('Response -> data:', data);\n            let response = {\n                'statusCode': 200,\n                'headers': {\n                    'Access-Control-Allow-Origin': '*',\n                    'Content-Type': 'application/json'\n                },\n                'body': JSON.stringify({\n                    'Code': 'PutRecordSuccessful',\n                    'Message': 'Record was successfully put to click-stream',\n                    'Data': data\n                }),\n                'isBase64Encoded': false\n            };\n            callback(null, response);\n        })\n        .catch(err => {\n            console.log('Response -> error:', err);\n            let response = {\n                'statusCode': err.statusCode,\n                'headers': {\n                    'Access-Control-Allow-Origin': '*',\n                    'Content-Type': 'application/json'\n                },\n                'body': JSON.stringify({\n                    'Code': err.code,\n                    'Message': err.message\n                }),\n                'isBase64Encoded': false\n            };\n            callback(null, response);\n        });\n\n}","resources":["apigusEast1activityStreamProxyreportpost","kinesisclickStream","kinesisclickStream","kinesisclickStream","kinesisclickStream","kinesisclickStream","kinesisclickStream"],"triggers":[{"resourceName":"apigusEast1activityStreamProxyreportpost","config":{}}],"version":1}},"rootNode":"33934c41-a5f8-4f8f-9d03-8d207726a4e8","openFiles":["bad406e2-4d28-4698-b061-3ab30fb2fa0b","16e8ed21-8b13-496c-8a07-ff6b94c7e9e7"],"currentFileId":"bad406e2-4d28-4698-b061-3ab30fb2fa0b","resources":{"kinesisclickStream":{"name":"kinesisclickStream","type":"Kinesis","config":{"mode":0,"StreamName":"click-stream","shards":1,"region":"us-east-1","operation":"put-record"},"globallyEditable":true,"usage":{"16e8ed21-8b13-496c-8a07-ff6b94c7e9e7":{"operations":{},"occurrence":1,"triggers":[{"StartingPosition":"TRIM_HORIZON","BatchSize":100}]},"bad406e2-4d28-4698-b061-3ab30fb2fa0b":{"operations":{"putRecord":[{"Data":"@{activity}","PartitionKey":"0","StreamName":"click-stream"}]},"occurrence":1,"triggers":[]}}},"apigusEast1activityStreamProxyreportpost":{"name":"apigusEast1activityStreamProxyreportpost","type":"API_GATEWAY","config":{"selectedRegion":"us-east-1","apiMode":0,"apiName":"activity-stream-proxy","endpointType":"EDGE","resourceMode":0,"resourceName":"report","resourcePath":"/report","restMethod":"POST","proxyIntegration":true,"enableCORS":true,"stageMode":0,"stageName":"Prod"},"globallyEditable":true,"usage":{"bad406e2-4d28-4698-b061-3ab30fb2fa0b":{"operations":{},"occurrence":1,"triggers":[{}]}}},"ddbclickStreamTable":{"name":"ddbclickStreamTable","type":"DynamoDB","config":{"mode":0,"operation":"put","table":{"arn":"","name":"click-stream-table","partitionKey":"IP","partitionKeyType":"S","hasSortKey":true,"sortKey":"Timestamp","sortKeyType":"S","mode":0},"isGlobalEditMode":false,"parameters":{"Key":{},"Item":{"IP":"@{activity.ip}","Timestamp":"@{activity.timestamp}","Browser":"@{activity.browser}","URL":"@{activity.url}","Referrer":"@{activity.referrer}","OS":"@{activity.os}","Country":"@{activity.country}","Language":"@{activity.language}"},"ExpressionAttributeValues":{}},"validator":{"validatableFields":{},"validity":true},"valid":true},"globallyEditable":false,"usage":{"16e8ed21-8b13-496c-8a07-ff6b94c7e9e7":{"operations":{"put":[{"TableName":"click-stream-table","Item":{"IP":"@{activity.ip}","Timestamp":"@{activity.timestamp}","Browser":"@{activity.browser}","URL":"@{activity.url}","Referrer":"@{activity.referrer}","OS":"@{activity.os}","Country":"@{activity.country}","Language":"@{activity.language}"}}]},"occurrence":1,"triggers":[]}}}},"packageJSON":{"dependencies":{"aws-sdk":{"name":"aws-sdk","version":"2.176.0","notRemovable":true},"slappforge-sdk":{"name":"@slappforge/slappforge-sdk","version":"0.0.3","notRemovable":true,"types":"\n                    declare class RDSQueryParams {\n    instanceIdentifier: string;\n    query: string;\n    inserts: Array<any>\n}\n\ndeclare namespace SL.AWS {\n    class RDS {\n        query(params: RDSQueryParams, callback: Function, connection: any): void;\n\n        beginTransaction(params: any, callback: Function): void;\n    }\n\n    class SQS {\n        receiveAndDeleteMessages(params: any, filteringCallBack: Function, deleteCallBack: Function, errorCallBack: Function): void;\n    }\n}\n"}}},"lambdaId":"16e8ed21-8b13-496c-8a07-ff6b94c7e9e7","changeExistingProject":true,"additionalFiles":[]},"PROJECT_META":{"projectName":"real-time-stream-processor-mock","projectDescription":"A sample use case of the usage of AWS Kinesis with AWS Lambda (Real-time Stream Processing: Application Activity Tracking)","projectVersion":"1.0.0","projectRegion":"us-east-1","repoName":"real-time-stream-processor-mock","repoUrl":"https://github.com/sigmaidetest/real-time-stream-processor-mock","lastSave":1517811441909}}